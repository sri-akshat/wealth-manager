openapi: 3.1.0
info:
  title: User Service
  description: User management service for wealth manager platform. Handles user registration,
    authentication, and profile management.
  version: 1.0.0
paths:
  /:
    get:
      tags:
      - system
      summary: Root
      description: 'Root endpoint that provides basic service information.


        Returns service name, version, and status.'
      operationId: root__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /health:
    get:
      tags:
      - system
      summary: Health Check
      description: Check if the service is healthy.
      operationId: health_check_health_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /register:
    post:
      tags:
      - users
      summary: Register User
      description: 'Register a new user.


        Creates a new user account with the provided details and optionally returns

        an access token for immediate authentication.'
      operationId: register_user_register_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /token:
    post:
      tags:
      - auth
      summary: Create access token
      description: "OAuth2 compatible token login, get an access token for future\
        \ requests.\n    \n    Form Parameters:\n    - **username**: Email address\n\
        \    - **password**: Account password\n    - **scope**: Space-separated list\
        \ of requested scopes (optional)\n    - **grant_type**: OAuth2 grant type,\
        \ defaults to \"password\" (optional)"
      operationId: login_token_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_login_token_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /users/me:
    get:
      tags:
      - users
      summary: Get Current User
      description: 'Get the current authenticated user''s profile.


        Returns the complete profile information of the currently logged-in user.'
      operationId: get_current_user_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Invalid authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - OAuth2PasswordBearer: []
  /users:
    get:
      tags:
      - users
      summary: List Users
      description: 'Get a list of all users (admin only).


        Returns a paginated list of user profiles. Only accessible by administrators.'
      operationId: list_users_users_get
      security:
      - OAuth2PasswordBearer: []
      parameters:
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          default: 0
          title: Skip
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 100
          title: Limit
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '401':
          description: Invalid authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    Body_login_token_post:
      properties:
        grant_type:
          anyOf:
          - type: string
            pattern: password
          - type: 'null'
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
          - type: string
          - type: 'null'
          title: Client Secret
      type: object
      required:
      - username
      - password
      title: Body_login_token_post
    ErrorResponse:
      properties:
        detail:
          type: string
          title: Detail
          description: Error message
        status_code:
          type: integer
          title: Status Code
          description: HTTP status code
        error_type:
          type: string
          title: Error Type
          description: Type of error
      type: object
      required:
      - detail
      - status_code
      - error_type
      title: ErrorResponse
      description: Schema for error responses.
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    RegisterResponse:
      properties:
        access_token:
          anyOf:
          - type: string
          - type: 'null'
          title: Access Token
          description: JWT access token if auto-login is enabled
        user:
          $ref: '#/components/schemas/User'
          description: Created user details
      type: object
      required:
      - user
      title: RegisterResponse
      description: Schema for successful registration response.
    Role:
      type: string
      enum:
      - admin
      - customer
      - distributor
      title: Role
    TokenResponse:
      properties:
        access_token:
          type: string
          title: Access Token
          description: JWT access token
        token_type:
          type: string
          title: Token Type
          description: Token type
          default: bearer
        expires_in:
          type: integer
          title: Expires In
          description: Token expiration in seconds
          default: 3600
        scope:
          type: string
          title: Scope
          description: Space-separated list of granted scopes
          default: ''
        user:
          $ref: '#/components/schemas/UserBase'
          description: User profile information
      type: object
      required:
      - access_token
      - user
      title: TokenResponse
      description: OAuth2 compatible token response.
    User:
      properties:
        email:
          type: string
          format: email
          title: Email
          description: User's email address
        full_name:
          type: string
          title: Full Name
          description: User's full name
        role:
          $ref: '#/components/schemas/Role'
          description: User's role in the system
          default: customer
        id:
          type: integer
          title: Id
          description: User's unique identifier
        is_active:
          type: boolean
          title: Is Active
          description: Whether the user account is active
        created_at:
          type: string
          format: date-time
          title: Created At
          description: When the user account was created
      type: object
      required:
      - email
      - full_name
      - id
      - is_active
      - created_at
      title: User
      description: Schema for user response.
    UserBase:
      properties:
        email:
          type: string
          format: email
          title: Email
          description: User's email address
        full_name:
          type: string
          title: Full Name
          description: User's full name
        role:
          $ref: '#/components/schemas/Role'
          description: User's role in the system
          default: customer
      type: object
      required:
      - email
      - full_name
      title: UserBase
      description: Base user schema with common fields.
    UserCreate:
      properties:
        email:
          type: string
          format: email
          title: Email
          description: User's email address
        full_name:
          type: string
          title: Full Name
          description: User's full name
        role:
          $ref: '#/components/schemas/Role'
          description: User's role in the system
          default: customer
        password:
          type: string
          minLength: 8
          title: Password
          description: User's password
      type: object
      required:
      - email
      - full_name
      - password
      title: UserCreate
      description: Schema for user registration request.
    UserList:
      properties:
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
          title: Users
          description: List of users
        total:
          type: integer
          title: Total
          description: Total number of users
        skip:
          type: integer
          title: Skip
          description: Number of users skipped
        limit:
          type: integer
          title: Limit
          description: Maximum number of users returned
      type: object
      required:
      - users
      - total
      - skip
      - limit
      title: UserList
      description: Schema for list of users response.
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          tokenUrl: token
          scopes:
            read:profile: Read user profile
            write:profile: Update user profile
            admin: Admin access
security:
- OAuth2PasswordBearer: []
